# Name your Spring Boot Application
spring.application.name=spring-cloud-config-server
server.port=8888

# You need to add the folder into this project root, see https://stackoverflow.com/questions/23058448/linked-files-and-folder-in-intellij
# Copy the location of the limits-service.properties to here. Remember to deal with local file you need to add file:// in front of the file directory.
# Take a look in official documentation: https://cloud.spring.io/spring-cloud-config/reference/html/
# For local URL, you need to write file://YOUR_LOCAL_DIRECTORY_HERE
# For Windows:
#spring.cloud.config.server.git.uri=file://C:/Users/A.W.P G.H.O.S.T/Desktop/git-localconfig-repo
# For MacOS:
spring.cloud.config.server.git.uri=file://Users/tkhenghong/Desktop/SpringBootProjects/git-localconfig-repo

# {"name":"limits-service","profiles":["default"],"label":null,"version":"197cf85fef190477a5054d897f011ce015a78ba1","state":null,"propertySources":[]}

# Type http://localhost:8888/limits-service/default in browser:
# IMPORTANT LESSON: The "limits-service" in the URL above is the same name as your limits-service.properties file.
# If you changed the name of limits-service.properties to limit-service.properties, you need to change your URL from
# "http://localhost:8888/limits-service/default" to "http://localhost:8888/limit-service/default"

# {
#   "name":"limits-service",
#   "profiles":[
#      "default"
#   ],
#   "label":null,
#   "version":"197cf85fef190477a5054d897f011ce015a78ba1",
#   "state":null,
#   "propertySources":[
#      {
#         "name":"file://C:/Users/A.W.P G.H.O.S.T/Desktop/git-localconfig-repo/limits-service.properties",
#         "source":{
#            "limits-service.minimum":"9",
#            "limits-service.maximum":"999"
#         }
#      }
#   ]
#}

# Go to other .properties file to check which URL can be executed

# Another lesson: You need to commit the .properties files if you got something that you want to change.
# Because when you start/restart the Spring Boot project, the program will think you got changes in those .properties file that are
# not clean and REMOVE THOSE LINES, cause you to LOSE changes(FATAL)****

# 1. Create new properties file for each new microservice app is made, and commit them in the GIT repository.
# 2. Restart Spring Cloud Config server,
# 3. Setup your microservice to point to the URL of the Spring Cloud Config server and set environments (spring.active.profile) to get configurations from which avaialable .properties file.
# 4. Start your microservice to see the effects.

# Added notes:
# After you have changed and committed the changes, actually you don't have to restart the spring cloud config server to reflect the changes.
# First, you need to allow actuator endpoints OF THE MICROSERVICES to be accessed.
# By type: management.endpoints.web.exposure.include=* into those microservices. Restart them to reflect the changes.
# Then, change any configuration properties value that you have, git add and commit the changes.
# Then, use POST request of localhost:8080/application/refresh to refresh the configuration of the instance of the microservice.
# But this will become a problem as if there are 100+ mircoservices we have to refresh them one by one, this is not a good solution.

# So we use Spring Cloud Bus in here.
# Add Spring Cloud Starter Bus AMQP dependency, then add the line below to allow access to Spring Boot actuator endpoints:
management.endpoints.web.exposure.include=*

#Then change the value in local-config-repo project.
#
#Then send a POST request to localhost:8080/actuator/bus-refresh

# You will see the value has changed.






